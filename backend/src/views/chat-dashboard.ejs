<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat con Mervin - Owl Fence Estimator</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
  <style>
    body {
      background-color: #f5f5f5;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    .chat-container {
      height: calc(100vh - 140px);
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    
    .chat-header {
      background-color: #4a6da7;
      color: white;
      padding: 15px;
      font-weight: bold;
      border-top-left-radius: 10px;
      border-top-right-radius: 10px;
    }
    
    .chat-messages {
      height: calc(100% - 120px);
      overflow-y: auto;
      padding: 15px;
      background-color: white;
    }
    
    .chat-input {
      background-color: #f0f2f5;
      padding: 15px;
      border-bottom-left-radius: 10px;
      border-bottom-right-radius: 10px;
    }
    
    .message {
      margin-bottom: 15px;
      max-width: 80%;
    }
    
    .user-message {
      background-color: #e3f2fd;
      padding: 10px 15px;
      border-radius: 18px;
      margin-left: auto;
      color: #333;
      border-bottom-right-radius: 5px;
    }
    
    .mervin-message {
      background-color: #f1f1f1;
      padding: 10px 15px;
      border-radius: 18px;
      margin-right: auto;
      color: #333;
      border-bottom-left-radius: 5px;
    }
    
    .message-container {
      display: flex;
      flex-direction: column;
    }
    
    .user-container {
      align-items: flex-end;
    }
    
    .mervin-container {
      align-items: flex-start;
    }
    
    .sender-name {
      font-size: 12px;
      margin-bottom: 3px;
      color: #666;
    }
    
    .project-details-panel {
      background-color: white;
      border-radius: 10px;
      padding: 15px;
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
      height: calc(100vh - 140px);
      overflow-y: auto;
    }
    
    .project-details-header {
      background-color: #4a6da7;
      color: white;
      padding: 10px 15px;
      border-radius: 5px;
      margin-bottom: 15px;
    }
    
    .estimate-card {
      border-left: 4px solid #4a6da7;
      margin-bottom: 15px;
    }
    
    .typing-indicator {
      display: none;
      align-items: center;
      margin-top: 5px;
      margin-bottom: 15px;
    }
    
    .typing-indicator span {
      height: 8px;
      width: 8px;
      background-color: #4a6da7;
      border-radius: 50%;
      display: inline-block;
      margin-right: 5px;
      animation: typing 1s infinite;
    }
    
    .typing-indicator span:nth-child(2) {
      animation-delay: 0.2s;
    }
    
    .typing-indicator span:nth-child(3) {
      animation-delay: 0.4s;
      margin-right: 0;
    }
    
    @keyframes typing {
      0% { transform: translateY(0px); }
      50% { transform: translateY(-5px); }
      100% { transform: translateY(0px); }
    }
    
    .btn-primary {
      background-color: #4a6da7;
      border-color: #4a6da7;
    }
    
    .btn-primary:hover, .btn-primary:focus {
      background-color: #3a5a8f;
      border-color: #3a5a8f;
    }
    
    .form-control:focus {
      border-color: #4a6da7;
      box-shadow: 0 0 0 0.25rem rgba(74, 109, 167, 0.25);
    }
    
    .session-info {
      font-size: 12px;
      color: #999;
    }
    
    .intelligence-questions {
      background-color: #fff8e1;
      border-left: 4px solid #ffc107;
      padding: 10px 15px;
      margin-top: 10px;
      border-radius: 5px;
      font-size: 14px;
    }
    
    .intelligence-questions h6 {
      color: #856404;
      margin-bottom: 8px;
    }
    
    .intelligence-questions ul {
      margin-bottom: 0;
      padding-left: 20px;
    }
  </style>
</head>
<body>
  <div class="container-fluid py-3">
    <div class="row mb-3">
      <div class="col-12">
        <h1 class="text-center">Chat con Mervin <small class="text-muted fs-6">Asistente de Estimados</small></h1>
      </div>
    </div>
    
    <div class="row">
      <!-- Chat Panel -->
      <div class="col-md-8">
        <div class="chat-container">
          <div class="chat-header d-flex justify-content-between align-items-center">
            <div>
              <i class="bi bi-robot"></i> Mervin
              <span class="session-info" id="session-id"></span>
            </div>
            <button class="btn btn-sm btn-outline-light" id="start-new-chat">Nueva Conversación</button>
          </div>
          <div class="chat-messages" id="chat-messages">
            <!-- Messages will be added here dynamically -->
          </div>
          <div class="typing-indicator ms-4" id="typing-indicator">
            <span></span>
            <span></span>
            <span></span>
            <small class="ms-2 text-muted">Mervin está escribiendo...</small>
          </div>
          <div class="chat-input">
            <form id="chat-form">
              <div class="input-group">
                <input type="text" class="form-control" id="message-input" placeholder="Escribe tu mensaje..." autocomplete="off">
                <button class="btn btn-primary" type="submit">
                  <i class="bi bi-send"></i>
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
      
      <!-- Project Details Panel -->
      <div class="col-md-4">
        <div class="project-details-panel">
          <div class="project-details-header">
            <h5 class="mb-0">Detalles del Proyecto</h5>
          </div>
          <div id="project-details">
            <div class="alert alert-info">
              <i class="bi bi-info-circle"></i> Inicia una conversación con Mervin para ver los detalles del proyecto aquí.
            </div>
          </div>
          <div id="estimate-details" class="mt-4">
            <!-- Estimate details will appear here when available -->
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Elements
      const chatForm = document.getElementById('chat-form');
      const messageInput = document.getElementById('message-input');
      const chatMessages = document.getElementById('chat-messages');
      const typingIndicator = document.getElementById('typing-indicator');
      const projectDetailsPanel = document.getElementById('project-details');
      const estimateDetailsPanel = document.getElementById('estimate-details');
      const sessionIdElement = document.getElementById('session-id');
      const startNewChatButton = document.getElementById('start-new-chat');
      
      // Variables
      let sessionId = '';
      let projectType = '';
      
      // Initialize Chat Session
      initializeChat();
      
      // Event Listeners
      chatForm.addEventListener('submit', sendMessage);
      startNewChatButton.addEventListener('click', initializeChat);
      
      // Functions
      async function initializeChat() {
        // Clear chat UI
        chatMessages.innerHTML = '';
        projectDetailsPanel.innerHTML = `
          <div class="alert alert-info">
            <i class="bi bi-info-circle"></i> Inicia una conversación con Mervin para ver los detalles del proyecto aquí.
          </div>
        `;
        estimateDetailsPanel.innerHTML = '';
        
        // Show typing indicator
        showTypingIndicator();
        
        try {
          // Start a new chat session
          const response = await fetch('/api/chat/start', {
            method: 'POST'
          });
          
          if (!response.ok) {
            throw new Error('Error al iniciar el chat');
          }
          
          const data = await response.json();
          sessionId = data.sessionId;
          sessionIdElement.textContent = `(Sesión: ${sessionId.slice(0, 8)}...)`;
          
          // Add welcome message
          addMervinMessage('¡Hola! Soy Mervin, tu asistente para crear estimados. ¿En qué tipo de proyecto estás interesado?');
          
          // Add some example prompts
          const examplesHtml = `
            <div class="intelligence-questions mt-3">
              <h6>Ejemplos de lo que puedes preguntar:</h6>
              <ul>
                <li>Necesito un estimado para una cerca de madera de 100 pies</li>
                <li>Quiero construir una terraza de 400 pies cuadrados</li>
                <li>Necesito reemplazar mi techo de tejas</li>
              </ul>
            </div>
          `;
          addRawMessage(examplesHtml);
          
        } catch (error) {
          console.error('Error:', error);
          addMervinMessage('Lo siento, hubo un error al iniciar el chat. Por favor, intenta nuevamente.');
        } finally {
          hideTypingIndicator();
        }
      }
      
      async function sendMessage(e) {
        e.preventDefault();
        
        const message = messageInput.value.trim();
        if (!message || !sessionId) return;
        
        // Add user message to chat
        addUserMessage(message);
        
        // Clear input
        messageInput.value = '';
        
        // Show typing indicator
        showTypingIndicator();
        
        try {
          // Send message to server
          const response = await fetch('/api/chat/message', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              sessionId,
              message
            })
          });
          
          if (!response.ok) {
            throw new Error('Error al enviar el mensaje');
          }
          
          const data = await response.json();
          
          // Add Mervin's response
          addMervinMessage(data.response);
          
          // Update project details if available
          updateProjectDetails(data);
          
          // Show intelligent questions if available
          if (data.intelligentQuestions && data.intelligentQuestions.length > 0) {
            displayIntelligentQuestions(data.intelligentQuestions);
          }
          
          // Check if an estimate was generated
          if (data.estimateDetails) {
            displayEstimateDetails(data.estimateDetails);
          }
          
        } catch (error) {
          console.error('Error:', error);
          addMervinMessage('Lo siento, hubo un error al procesar tu mensaje. Por favor, intenta nuevamente.');
        } finally {
          hideTypingIndicator();
        }
      }
      
      function addUserMessage(message) {
        const messageElement = document.createElement('div');
        messageElement.className = 'message-container user-container';
        messageElement.innerHTML = `
          <div class="sender-name">Tú</div>
          <div class="message user-message">${escapeHtml(message)}</div>
        `;
        chatMessages.appendChild(messageElement);
        scrollToBottom();
      }
      
      function addMervinMessage(message) {
        const messageElement = document.createElement('div');
        messageElement.className = 'message-container mervin-container';
        messageElement.innerHTML = `
          <div class="sender-name">Mervin</div>
          <div class="message mervin-message">${escapeHtml(message)}</div>
        `;
        chatMessages.appendChild(messageElement);
        scrollToBottom();
      }
      
      function addRawMessage(html) {
        const messageElement = document.createElement('div');
        messageElement.innerHTML = html;
        chatMessages.appendChild(messageElement);
        scrollToBottom();
      }
      
      function displayIntelligentQuestions(questions) {
        const questionsHtml = `
          <div class="intelligence-questions">
            <h6>Preguntas que puedes hacer:</h6>
            <ul>
              ${questions.map(q => `<li>${escapeHtml(q)}</li>`).join('')}
            </ul>
          </div>
        `;
        addRawMessage(questionsHtml);
      }
      
      function updateProjectDetails(data) {
        if (data.projectDetails) {
          const details = data.projectDetails;
          projectType = details.type || projectType;
          
          let detailsHtml = `
            <div class="card mb-3">
              <div class="card-body">
                <h5 class="card-title">${getProjectTypeName(projectType)}</h5>
                <hr>
          `;
          
          if (details.type) {
            detailsHtml += `<p><strong>Tipo:</strong> ${getProjectTypeName(details.type)}</p>`;
          }
          
          if (details.subtype || details.material) {
            detailsHtml += `<p><strong>Material:</strong> ${details.subtype || details.material || 'No especificado'}</p>`;
          }
          
          if (details.dimensions) {
            detailsHtml += `<p><strong>Dimensiones:</strong></p><ul>`;
            for (const [key, value] of Object.entries(details.dimensions)) {
              detailsHtml += `<li>${formatDimensionKey(key)}: ${value} ${getDimensionUnit(key)}</li>`;
            }
            detailsHtml += `</ul>`;
          }
          
          if (details.client) {
            detailsHtml += `
              <h6 class="mt-3">Datos del Cliente:</h6>
              <p><strong>Nombre:</strong> ${details.client.name || 'No especificado'}</p>
            `;
            
            if (details.client.address) {
              detailsHtml += `<p><strong>Ubicación:</strong> ${formatAddress(details.client.address)}</p>`;
            }
          }
          
          detailsHtml += `</div></div>`;
          projectDetailsPanel.innerHTML = detailsHtml;
        }
      }
      
      function displayEstimateDetails(estimate) {
        let estimateHtml = `
          <div class="card estimate-card">
            <div class="card-header bg-success text-white">
              <h5 class="mb-0">Estimado Generado</h5>
            </div>
            <div class="card-body">
              <h6>${estimate.projectSummary || 'Estimado preliminar'}</h6>
              <hr>
              <div class="row">
                <div class="col-6"><strong>Materiales:</strong></div>
                <div class="col-6 text-end">$${formatNumber(estimate.materialCost)}</div>
              </div>
              <div class="row">
                <div class="col-6"><strong>Mano de obra:</strong></div>
                <div class="col-6 text-end">$${formatNumber(estimate.laborCost)}</div>
              </div>
              ${estimate.equipmentCost ? `
              <div class="row">
                <div class="col-6"><strong>Equipos:</strong></div>
                <div class="col-6 text-end">$${formatNumber(estimate.equipmentCost)}</div>
              </div>
              ` : ''}
              <hr>
              <div class="row fw-bold">
                <div class="col-6"><strong>TOTAL:</strong></div>
                <div class="col-6 text-end">$${formatNumber(estimate.totalCost)}</div>
              </div>
              ${estimate.pdfUrl ? `
              <div class="mt-3">
                <a href="${estimate.pdfUrl}" target="_blank" class="btn btn-sm btn-primary">
                  <i class="bi bi-file-earmark-pdf"></i> Ver PDF
                </a>
              </div>
              ` : ''}
            </div>
          </div>
        `;
        
        estimateDetailsPanel.innerHTML = estimateHtml;
      }
      
      // Helper Functions
      function scrollToBottom() {
        chatMessages.scrollTop = chatMessages.scrollHeight;
      }
      
      function showTypingIndicator() {
        typingIndicator.style.display = 'flex';
        scrollToBottom();
      }
      
      function hideTypingIndicator() {
        typingIndicator.style.display = 'none';
      }
      
      function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
      }
      
      function getProjectTypeName(type) {
        const types = {
          'fencing': 'Cerca',
          'decking': 'Terraza',
          'roofing': 'Techo',
          'concrete': 'Concreto'
        };
        return types[type] || type || 'No especificado';
      }
      
      function formatDimensionKey(key) {
        const keys = {
          'length': 'Longitud',
          'width': 'Ancho',
          'height': 'Altura',
          'squareFeet': 'Área',
          'thickness': 'Grosor'
        };
        return keys[key] || key;
      }
      
      function getDimensionUnit(key) {
        const units = {
          'length': 'pies',
          'width': 'pies',
          'height': 'pies',
          'squareFeet': 'pies²',
          'thickness': 'pulgadas'
        };
        return units[key] || '';
      }
      
      function formatAddress(address) {
        const parts = [];
        if (address.city) parts.push(address.city);
        if (address.state) parts.push(address.state);
        if (address.zipCode) parts.push(address.zipCode);
        return parts.join(', ') || 'No especificada';
      }
      
      function formatNumber(num) {
        return num ? parseFloat(num).toFixed(2) : '0.00';
      }
    });
  </script>
</body>
</html>