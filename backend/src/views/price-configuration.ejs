<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Configuración de Precios - Owl Fence Estimator</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      padding: 20px;
      background-color: #f8f9fa;
    }
    .card {
      margin-bottom: 20px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    .price-category {
      margin-bottom: 15px;
      padding-bottom: 15px;
      border-bottom: 1px solid #dee2e6;
    }
    .price-category:last-child {
      border-bottom: none;
      margin-bottom: 0;
      padding-bottom: 0;
    }
    .input-group-text {
      min-width: 120px;
      justify-content: end;
    }
    .custom-select {
      font-weight: bold;
    }
    .pricing-details {
      max-height: 500px;
      overflow-y: auto;
    }
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 1050;
      display: none;
    }
    
    /* New responsive improvements */
    @media (max-width: 767px) {
      .container {
        padding: 10px;
      }
      .card-body {
        padding: 15px;
      }
      .input-group-text {
        min-width: 100px;
        font-size: 0.9rem;
      }
      .price-category {
        margin-bottom: 10px;
        padding-bottom: 10px;
      }
    }
    
    /* Improve form controls on mobile */
    @media (max-width: 576px) {
      .input-group {
        flex-direction: column;
        align-items: stretch;
      }
      .input-group-text {
        width: 100%;
        justify-content: start;
        border-radius: 0.375rem 0.375rem 0 0;
        border-bottom: none;
      }
      .form-control {
        border-radius: 0 0 0.375rem 0.375rem;
      }
      .btn-group {
        flex-direction: column;
      }
      .btn-group > .btn {
        border-radius: 0.375rem !important;
        margin-bottom: 5px;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1 class="text-center mb-4">Configuración de Precios</h1>
    
    <div class="row">
      <!-- Changed from static columns to responsive ones -->
      <div class="col-lg-4 col-md-6 col-sm-12 mb-3">
        <div class="card">
          <div class="card-header bg-primary text-white">
            <h5 class="mb-0">Categorías de Materiales</h5>
          </div>
          <div class="card-body">
            <select id="material-category" class="form-select custom-select">
              <option value="" selected disabled>Seleccione una categoría</option>
              <!-- Categories will be dynamically loaded -->
            </select>
          </div>
        </div>
      </div>
      
      <!-- Changed from static columns to responsive ones -->
      <div class="col-lg-8 col-md-6 col-sm-12">
        <div class="card">
          <div class="card-header bg-primary text-white">
            <div class="d-flex justify-content-between align-items-center">
              <h5 class="mb-0">Detalles de Precios</h5>
              <div>
                <button id="save-prices" class="btn btn-light btn-sm">Guardar</button>
              </div>
            </div>
          </div>
          <div class="card-body pricing-details">
            <div id="price-details">
              <p class="text-center text-muted">Seleccione una categoría para ver los detalles de precios.</p>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Historical Price Data -->
    <div class="card mt-4">
      <div class="card-header bg-secondary text-white">
        <h5 class="mb-0">Historial de Precios</h5>
      </div>
      <div class="card-body">
        <!-- Make the table responsive -->
        <div class="table-responsive">
          <table class="table table-striped">
            <thead>
              <tr>
                <th>Material</th>
                <th>Fecha</th>
                <th>Precio Anterior</th>
                <th>Precio Actual</th>
                <th>Variación</th>
              </tr>
            </thead>
            <tbody id="price-history">
              <!-- Price history data will be loaded here -->
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Notification Toast -->
  <div class="notification">
    <div class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="d-flex">
        <div class="toast-body">
          Precios guardados correctamente.
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Load categories dynamically
      loadCategories();
      
      // Event listeners
      document.getElementById('material-category').addEventListener('change', loadPriceDetails);
      document.getElementById('save-prices').addEventListener('click', savePrices);
      
      // Load categories
      async function loadCategories() {
        try {
          const response = await fetch('/api/categories');
          if (!response.ok) throw new Error('Error loading categories');
          
          const categories = await response.json();
          const categorySelect = document.getElementById('material-category');
          
          categories.forEach(category => {
            const option = document.createElement('option');
            option.value = category.id;
            option.textContent = category.name;
            categorySelect.appendChild(option);
          });
        } catch (error) {
          console.error('Error:', error);
          alert('No se pudieron cargar las categorías. Por favor intenta de nuevo.');
        }
      }
      
      // Load price details
      async function loadPriceDetails() {
        const categoryId = document.getElementById('material-category').value;
        
        try {
          const response = await fetch(`/api/prices?category=${categoryId}`);
          if (!response.ok) throw new Error('Error loading price details');
          
          const priceDetails = await response.json();
          const priceDetailsContainer = document.getElementById('price-details');
          
          priceDetailsContainer.innerHTML = '';
          
          priceDetails.forEach(detail => {
            const div = document.createElement('div');
            div.className = 'price-category';
            div.innerHTML = `
              <div class="input-group mb-3">
                <span class="input-group-text">${detail.name}</span>
                <input type="number" class="form-control" value="${detail.price}" data-id="${detail.id}">
              </div>
            `;
            priceDetailsContainer.appendChild(div);
          });
        } catch (error) {
          console.error('Error:', error);
          alert('No se pudieron cargar los detalles de precios. Por favor intenta de nuevo.');
        }
      }
      
      // Save prices
      async function savePrices() {
        const inputs = document.querySelectorAll('#price-details input');
        const prices = Array.from(inputs).map(input => ({
          id: input.dataset.id,
          price: input.value
        }));
        
        try {
          const response = await fetch('/api/prices', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(prices)
          });
          
          if (!response.ok) throw new Error('Error saving prices');
          
          const result = await response.json();
          showNotification('Precios guardados correctamente.');
        } catch (error) {
          console.error('Error:', error);
          alert('Error al guardar precios. Por favor intenta de nuevo.');
        }
      }
      
      // Show notification
      function showNotification(message) {
        const notification = document.querySelector('.notification .toast');
        const toastBody = notification.querySelector('.toast-body');
        toastBody.textContent = message;
        const toast = new bootstrap.Toast(notification);
        toast.show();
      }
    });
  </script>
</body>
</html>